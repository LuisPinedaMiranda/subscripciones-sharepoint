/// <reference types="node" />
import { IFileAddResult, IFileUploadProgressData } from "@pnp/sp/files/index.js";
import { ReadStream } from "fs";
import { PassThrough } from "stream";
export interface IResponseBodyStream {
    body: PassThrough;
    knownLength: number;
}
declare type ProgressFunc = (data: IFileUploadProgressData) => void;
declare type ChunkedResult = Promise<IFileAddResult>;
declare module "@pnp/sp/files/types" {
    interface IFile {
        /**
         * Gets a PassThrough stream representing the file
         */
        getStream(): Promise<IResponseBodyStream>;
        /**
         * Sets a file stream content chunk
         */
        setStreamContentChunked(stream: ReadStream, progress?: ProgressFunc): ChunkedResult;
    }
    interface IFiles {
        /**
         * Adds a file stream in chunks
         */
        addChunked(url: string, content: Blob | ReadStream, progress?: ProgressFunc, shouldOverWrite?: boolean, chunkSize?: number): ChunkedResult;
    }
}
export {};
//# sourceMappingURL=stream.d.ts.map